import { ToolGenerator } from './tool-generator.js';

export class EslintGenerator extends ToolGenerator {
  name = 'eslint';

  shouldRun(config: any): boolean {
    return !!config.tools?.eslint;
  }

  protected override getDefaultConfig(): Record<string, any> {
    return {
      root: true,
      env: {
        node: true,
        es2020: true,
      },
      extends: ['eslint:recommended'],
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
      rules: {},
    };
  }

  async generate(config: any): Promise<void> {
    const raw = config.tools?.eslint;
    const isObj = typeof raw === 'object' && raw !== null;

    const mode: 'flat' | 'legacy' =
      isObj && raw.mode === 'flat' ? 'flat' : 'legacy';
    const userConfig = isObj ? { ...raw } : {};
    delete userConfig.mode;

    if (mode === 'flat') {
      const flatConfig = [
        {
          files: ['**/*.js', '**/*.ts'],
          languageOptions: {
            ecmaVersion: 'latest',
            sourceType: 'module',
          },
          rules: userConfig.rules ?? {},
        },
      ];
      const content = `/**
 * ESLint Flat Config generated by dcore
 */
export default ${JSON.stringify(flatConfig, null, 2)};`;

      await this.writeTextFile('eslint.config.js', content);
    } else {
      const merged = { ...this.getDefaultConfig(), ...userConfig };
      const content = `/**
 * ESLint legacy config (.eslintrc.cjs) generated by dcore
 */
export default ${JSON.stringify(merged, null, 2)};`;

      await this.writeTextFile('.eslintrc.cjs', content);
    }
  }
}
