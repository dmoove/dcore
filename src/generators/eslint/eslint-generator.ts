import { z } from 'zod';

import { PackageJsonGenerator } from '../package-json/package-json-generator.js';
import {
  DEFAULT_IGNORE_ENTRIES,
  GeneratorConfig,
  ToolGenerator,
} from '../tool-generator.js';

/**
 * Generates ESLint configuration files in either flat or legacy mode and
 * registers the dependency.
 */
export class EslintGenerator extends ToolGenerator {
  name = 'eslint';

  constructor(
    projectRoot: string,
    private readonly pkg?: PackageJsonGenerator
  ) {
    super(projectRoot);
  }

  /**
   * Optional user configuration schema for ESLint.
   */
  static override get configSchema() {
    return z.union([
      z.boolean(),
      z.object({
        mode: z.enum(['legacy', 'flat']).optional(),
        rules: z.record(z.string(), z.any()).optional(),
      }),
    ]);
  }

  /**
   * Write ESLint configuration and update dependencies.
   */
  async generate(config: GeneratorConfig): Promise<void> {
    const toolCfg = this.getToolConfig(config);
    const isObj = typeof toolCfg === 'object' && toolCfg !== null;

    const mode: 'flat' | 'legacy' =
      isObj && typeof toolCfg.mode === 'string' && toolCfg.mode === 'flat'
        ? 'flat'
        : 'legacy';

    const userCfg = isObj ? { ...toolCfg } : {};
    delete (userCfg as Record<string, unknown>).mode;

    if (mode === 'flat') {
      const flatConfig = [
        {
          files: ['**/*.ts', '**/*.js'],
          languageOptions: {
            ecmaVersion: 'latest',
            sourceType: 'module',
          },
          rules: userCfg.rules ?? {},
        },
      ];

      const content = `/**
 * ESLint Flat Config generated by dcore
 */
export default ${JSON.stringify(flatConfig, null, 2)};`;

      await this.writeTextFile('eslint.config.js', content);
    } else {
      const merged = { ...this.getDefaultConfig(), ...userCfg };

      const content = `/**
 * ESLint legacy config (.eslintrc.cjs) generated by dcore
 */
export default ${JSON.stringify(merged, null, 2)};`;

      await this.writeTextFile('.eslintrc.cjs', content);
    }

    await this.appendToIgnoreFile('.eslintignore', ...DEFAULT_IGNORE_ENTRIES);

    this.pkg?.addDevDependency('eslint', '^8.56.0');
  }

  /**
   * Default ESLint configuration used for the legacy `.eslintrc` format.
   */
  protected override getDefaultConfig(): Record<string, unknown> {
    return {
      env: {
        es2020: true,
        node: true,
      },
      extends: ['eslint:recommended'],
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
      root: true,
      rules: {},
    };
  }

  /**
   * Run only when ESLint is enabled in the config.
   */
  override shouldRun(config: GeneratorConfig): boolean {
    return Boolean(this.getToolConfig(config));
  }
}
